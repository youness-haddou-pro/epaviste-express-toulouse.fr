---
const reviews = [
  { name: "Paul D.",  text: "Intervention super rapide, enl√®vement gratuit comme annonc√©.", rating: 5 },
  { name: "Sonia R.", text: "Tr√®s pro et papier de destruction re√ßu, je recommande.",       rating: 5 },
  { name: "Imad K.",  text: "Arriv√©s en 1 h, √©quipe ponctuelle, merci !",                    rating: 5 },
];

const count = reviews.length;
const avg = Number((reviews.reduce((a, r) => a + r.rating, 0) / count).toFixed(1));

// Remplace par ton lien d‚Äôavis Google si tu en as un
const reviewsHref = "https://g.page/r/XXXX/review";
---

<section id="avis" class="relative mx-auto max-w-6xl px-6 py-16">
  <!-- d√©co discr√®te -->
  <div class="pointer-events-none absolute inset-x-0 top-0 -z-10 h-28 bg-gradient-to-b from-emerald-100/60 to-transparent opacity-70"></div>

  <header class="mb-10">
    <div class="flex flex-wrap items-end justify-between gap-4">
      <div>
        <h2 class="text-2xl font-bold tracking-tight md:text-3xl">Avis clients</h2>
        <p class="mt-2 text-gray-600">Objectif : <strong>4.8‚òÖ / 5</strong>. Voici quelques retours r√©cents.</p>
      </div>

      <div class="flex items-center gap-3 rounded-2xl bg-white px-4 py-2 ring-1 ring-gray-200 shadow-sm">
        <div class="flex items-center">
          {Array.from({ length: 5 }).map((_, i) => (
            <svg class={"h-5 w-5 " + (i < Math.round(avg) ? "text-amber-500" : "text-amber-200")} viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path d="M10 2.5l2.6 5.3 5.9.9-4.2 4.1 1 5.9L10 16.6 4.7 18.7l1-5.9L1.5 8.7l5.9-.9L10 2.5z"/>
            </svg>
          ))}
        </div>
        <span class="text-sm font-semibold text-gray-900">{avg.toFixed(1)} <span class="text-gray-500">/ 5</span></span>
        <span class="text-xs text-gray-500">({count} avis)</span>
      </div>
    </div>
  </header>

  <!-- grid desktop / carrousel tactile mobile -->
  <div class="flex snap-x snap-mandatory gap-4 overflow-x-auto pb-2 md:grid md:snap-none md:overflow-visible md:gap-6 md:grid-cols-3">
    {reviews.map((r, i) => (
      <figure
        class="review-card reveal group relative min-w-[85%] snap-center overflow-hidden rounded-2xl bg-white p-6 shadow-sm ring-1 ring-gray-200 transition duration-300 hover:-translate-y-1 hover:shadow-xl md:min-w-0"
        style={`--delay:${i * 80}ms`}
      >
        <!-- bordure d√©grad√©e -->
        <div class="pointer-events-none absolute inset-0 rounded-2xl opacity-0 transition-opacity duration-300 group-hover:opacity-100"
             style="mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                    -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                    -webkit-mask-composite: xor; mask-composite: exclude; padding:1px;
                    background:linear-gradient(120deg, rgba(16,185,129,.5), rgba(16,185,129,.12), rgba(16,185,129,.5));"></div>

        <!-- spotlight -->
        <div class="pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
             style="background: radial-gradient(360px circle at var(--x,50%) var(--y,50%), rgba(16,185,129,.08), transparent 40%);"></div>

        <div class="relative z-10">
          <div class="flex items-center justify-between gap-4">
            <div class="flex items-center gap-3">
              <span class="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200 font-semibold">
                {r.name[0]}
              </span>
              <figcaption class="text-sm font-medium text-gray-900">{r.name}</figcaption>
            </div>
            <div class="flex items-center" aria-label={`${r.rating} √©toiles`}>
              {Array.from({ length: 5 }).map((_, j) => (
                <svg class={"h-4 w-4 " + (j < r.rating ? "text-amber-500" : "text-amber-200")} viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path d="M10 2.5l2.6 5.3 5.9.9-4.2 4.1 1 5.9L10 16.6 4.7 18.7l1-5.9L1.5 8.7l5.9-.9L10 2.5z"/>
                </svg>
              ))}
            </div>
          </div>

          <blockquote class="mt-4 text-sm text-gray-700">
            <span class="text-emerald-600" aria-hidden="true">‚Äú</span>{r.text}<span class="text-emerald-600" aria-hidden="true">‚Äù</span>
          </blockquote>
        </div>
      </figure>
    ))}
  </div>

  <!-- CTA avis -->
  <div class="mt-8 flex flex-wrap items-center gap-3">
    <a href={reviewsHref} target="_blank" rel="noopener"
       class="inline-flex items-center gap-2 rounded-2xl bg-emerald-600 px-5 py-3 font-semibold text-white shadow-md transition hover:-translate-y-0.5 hover:shadow-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500">
      Laisser un avis
      <svg class="h-5 w-5" viewBox="0 0 24 24" fill="none" aria-hidden="true">
        <path d="M7 17L17 7M17 7H9M17 7v8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </a>
    <span class="text-sm text-gray-500">Merci pour votre retour üôè</span>
  </div>

  <!-- JSON-LD SEO -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "LocalBusiness",
      "name": "√âpaviste Toulouse",
      "aggregateRating": { "@type": "AggregateRating", "ratingValue": String(avg), "reviewCount": String(count) },
      "review": reviews.map((r) => ({
        "@type": "Review",
        "author": { "@type": "Person", "name": r.name },
        "reviewRating": { "@type": "Rating", "ratingValue": String(r.rating) },
        "reviewBody": r.text
      }))
    })}
  </script>
</section>

<style is:global>
/* reveal au scroll + d√©lai via --delay */
.reveal { opacity: 0; transform: translateY(8px); transition: opacity .45s ease, transform .45s ease; transition-delay: var(--delay, 0ms); }
.reveal.is-inview { opacity: 1; transform: translateY(0); }

@media (prefers-reduced-motion: reduce) {
  .reveal { opacity: 1; transform: none; transition: none; }
  .review-card { transition: none !important; }
}
</style>

<script>
  // Reveal au scroll
  const io = new IntersectionObserver((entries) => {
    entries.forEach(e => {
      if (e.isIntersecting) {
        e.target.classList.add('is-inview');
        io.unobserve(e.target);
      }
    });
  }, { threshold: 0.18 });
  document.querySelectorAll('.reveal').forEach(el => io.observe(el));

  // Spotlight (suit la souris)
  document.querySelectorAll('.review-card').forEach((card) => {
    card.addEventListener('mousemove', (e) => {
      const r = card.getBoundingClientRect();
      const x = ((e.clientX - r.left) / r.width) * 100;
      const y = ((e.clientY - r.top) / r.height) * 100;
      card.style.setProperty('--x', x + '%');
      card.style.setProperty('--y', y + '%');
    });
    card.addEventListener('mouseleave', () => {
      card.style.removeProperty('--x'); card.style.removeProperty('--y');
    });
  });
</script>
