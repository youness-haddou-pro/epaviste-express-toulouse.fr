---
// components/LatestPosts.astro
import { getCollection, type CollectionEntry } from 'astro:content';
import BlogCard from './BlogCard.astro';

interface Props {
  limit?: number;
  title?: string;
  showCta?: boolean;
}

const {
  limit = 3,
  title = 'Derniers articles',
  showCta = true,
} = Astro.props as Props;

const posts = (await getCollection('blog', (e) => !e.data.draft))
  .sort((a, b) => +b.data.date - +a.data.date)
  .slice(0, limit) as CollectionEntry<'blog'>[];
---

<section id="latest-posts" class="relative mx-auto max-w-6xl px-6 py-16">
  <!-- décor discret -->
  <div class="pointer-events-none absolute inset-x-0 top-0 -z-10 h-28 bg-gradient-to-b from-emerald-100/60 to-transparent opacity-70"></div>

  <div class="mb-6 flex flex-wrap items-end justify-between gap-4">
    <h2 class="text-2xl font-bold tracking-tight md:text-3xl">{title}</h2>
    {showCta && posts.length > 0 && (
      <a href="/blog/"
         class="inline-flex items-center gap-2 rounded-2xl bg-gray-900 px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:-translate-y-0.5 hover:shadow-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500">
        Tout voir
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          class="h-4 w-4"
          aria-hidden="true"
          focusable="false"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path d="M7 17L17 7M17 7H9M17 7v8" />
        </svg>
      </a>
    )}
  </div>

  {posts.length === 0 ? (
    <p class="rounded-2xl bg-white/70 p-6 text-gray-600 ring-1 ring-gray-200">
      Les articles arrivent bientôt.
    </p>
  ) : (
    // Carrousel tactile en mobile, grid en desktop
    <div class="flex snap-x snap-mandatory gap-4 overflow-x-auto pb-2 md:grid md:snap-none md:overflow-visible md:gap-6 md:grid-cols-3">
      {posts.map((post, i) => (
        <div
          class="post-card reveal group relative min-w-[85%] snap-center overflow-hidden rounded-2xl transition duration-300 hover:-translate-y-1 hover:shadow-xl md:min-w-0"
          style={`--delay:${i * 80}ms`}
        >
          <!-- Bordure dégradée au hover (masque) -->
          <div class="pointer-events-none absolute inset-0 rounded-2xl opacity-0 transition-opacity duration-300 group-hover:opacity-100"
               style="mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                      -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                      -webkit-mask-composite: xor; mask-composite: exclude; padding:1px;
                      background:linear-gradient(120deg, rgba(16,185,129,.5), rgba(16,185,129,.12), rgba(16,185,129,.5));"></div>
          <!-- Spotlight doux -->
          <div class="pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
               style="background: radial-gradient(360px circle at var(--x,50%) var(--y,50%), rgba(16,185,129,.08), transparent 40%);"></div>

          <!-- Ton composant carte -->
          <BlogCard post={post} />
        </div>
      ))}
    </div>
  )}
</section>

<style is:global>
/* reveal au scroll + délai via --delay */
.reveal { opacity: 0; transform: translateY(8px); transition: opacity .45s ease, transform .45s ease; transition-delay: var(--delay, 0ms); }
.reveal.is-inview { opacity: 1; transform: translateY(0); }

@media (prefers-reduced-motion: reduce) {
  .reveal { opacity: 1; transform: none; transition: none; }
  .post-card { transition: none !important; }
}
</style>

<script>
  // Reveal au scroll
  const io = new IntersectionObserver((entries) => {
    entries.forEach(e => {
      if (e.isIntersecting) { e.target.classList.add('is-inview'); io.unobserve(e.target); }
    });
  }, { threshold: 0.18 });
  document.querySelectorAll('.reveal').forEach(el => io.observe(el));

  // Spotlight suivant la souris
  document.querySelectorAll('.post-card').forEach((card) => {
    card.addEventListener('mousemove', (e) => {
      const r = card.getBoundingClientRect();
      const x = ((e.clientX - r.left) / r.width) * 100;
      const y = ((e.clientY - r.top) / r.height) * 100;
      card.style.setProperty('--x', x + '%');
      card.style.setProperty('--y', y + '%');
    });
    card.addEventListener('mouseleave', () => {
      card.style.removeProperty('--x'); card.style.removeProperty('--y');
    });
  });
</script>
