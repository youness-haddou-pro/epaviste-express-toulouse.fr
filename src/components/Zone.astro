---
interface Address { street: string; postalCode: string; city: string }
const { data } = Astro.props as { data: { zoneCities: string[]; address: Address } };

// Adresse + lien Google Maps
const addressFull = `${data.address.street}, ${data.address.postalCode} ${data.address.city}`;
const mapsHref = `https://maps.google.com/?q=${encodeURIComponent(addressFull)}`;
---

<section id="zone" class="relative bg-white">
  <!-- décor discret en haut -->
  <div class="pointer-events-none absolute inset-x-0 top-0 -z-10 h-28 bg-gradient-to-b from-emerald-100/60 to-transparent opacity-70"></div>

  <div class="mx-auto max-w-6xl px-6 py-16">
    <header class="mb-10">
      <h2 class="text-2xl font-bold tracking-tight md:text-3xl">Zone d’intervention</h2>
      <p class="mt-2 text-gray-600">
        Toulouse et jusqu’à <strong>100 km</strong> autour.
        Hors zone : frais de déplacement <strong>20–100 €</strong> selon distance.
      </p>
    </header>

    <div class="grid gap-8 md:grid-cols-2">
      <!-- Liste des villes -->
      <div class="relative">
        <!-- wrapper avec hauteur max + fondu si overflow -->
        <div id="cities-wrap" class="relative max-h-64 overflow-hidden rounded-2xl ring-1 ring-gray-200 md:max-h-80">
          <ul id="cities-list" class="grid grid-cols-2 gap-2 bg-white p-3 text-sm md:grid-cols-3">
            {data.zoneCities.map((c, i) => (
              <li
                class="city-chip reveal group relative overflow-hidden rounded-xl bg-gray-50 px-3 py-2 ring-1 ring-gray-200
                       transition-all duration-300 ease-out hover:-translate-y-0.5 hover:bg-emerald-50/60 hover:ring-emerald-200 cursor-pointer"
                style={`--delay:${i * 25}ms`}
              >
                <!-- border gradient au hover via overlay masqué -->
                <span
                  class="pointer-events-none absolute inset-0 rounded-xl opacity-0 transition-opacity duration-300 group-hover:opacity-100"
                  style="mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                         -webkit-mask: linear-gradient(#000 0 0) content-box, linear-gradient(#000 0 0);
                         -webkit-mask-composite: xor; mask-composite: exclude; padding:1px;
                         background:linear-gradient(120deg, rgba(16,185,129,.45), rgba(16,185,129,.1), rgba(16,185,129,.45));"
                ></span>
                <span class="relative z-10 flex items-center gap-2">
                  <!-- puce -->
                  <span class="h-1.5 w-1.5 shrink-0 rounded-full bg-emerald-500/70 transition group-hover:scale-125"></span>
                  <span class="truncate">{c}</span>
                </span>
              </li>
            ))}
          </ul>

          <!-- fondu bas (visible seulement si replié) -->
          <div
            id="cities-fade"
            class="pointer-events-none absolute inset-x-0 bottom-0 h-16 bg-gradient-to-t from-white to-transparent"
          ></div>
        </div>

        <!-- bouton étendre/replier (affiché seulement si overflow) -->
        <div class="mt-3 flex justify-center">
          <button
            id="toggle-cities"
            class="inline-flex items-center gap-2 rounded-xl bg-gray-900 px-4 py-2 text-sm font-medium text-white
                   shadow-sm transition hover:-translate-y-0.5 hover:shadow-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500"
            data-state="collapsed"
          >
            Afficher tout
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              class="h-4 w-4 transition-transform"
              aria-hidden="true"
              focusable="false"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M10 14a1 1 0 0 1-.7-.29l-4-4a1 1 0 1 1 1.4-1.42L10 11.59l3.3-3.3a1 1 0 0 1 1.4 1.42l-4 4c-.18.19-.43.29-.7.29z"
              />
            </svg>
          </button>
        </div>
      </div>

      <!-- Cartes info (spotlight + reveal) -->
      <div class="flex flex-col gap-4">
        <!-- Carte couverture 100 km -->
        <article
          class="zone-card reveal group relative overflow-hidden rounded-2xl bg-white p-6 ring-1 ring-gray-200
                 transition duration-300 hover:shadow-xl cursor-pointer"
          style="--delay:80ms"
        >
          <!-- spotlight -->
          <div
            class="pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
            style="background: radial-gradient(360px circle at var(--x,50%) var(--y,50%), rgba(16,185,129,.08), transparent 40%);"
          ></div>

          <div class="relative z-10 flex items-start gap-4">
            <!-- mini “map” concentrique -->
            <div class="flex h-16 w-16 shrink-0 items-center justify-center rounded-xl bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 80 80"
                class="h-9 w-9"
                aria-hidden="true"
                focusable="false"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <circle cx="40" cy="40" r="30" opacity=".35" />
                <circle cx="40" cy="40" r="20" opacity=".45" />
                <circle cx="40" cy="40" r="10" opacity=".8" />
                <circle cx="40" cy="40" r="3" fill="currentColor" />
              </svg>
            </div>
            <div>
              <h3 class="font-semibold tracking-tight text-gray-900">Couverture</h3>
              <p class="mt-1 text-sm text-gray-600">Intervention jusqu’à <strong>100 km</strong> autour de Toulouse.</p>
              <p class="mt-1 text-xs text-gray-500">Au-delà&nbsp;: frais 20–100 € selon distance.</p>
            </div>
          </div>
        </article>

        <!-- Carte adresse -->
        <article
          class="zone-card reveal group relative overflow-hidden rounded-2xl bg-white p-6 ring-1 ring-gray-200
                 transition duration-300 hover:shadow-xl cursor-pointer"
          style="--delay:160ms"
        >
          <div
            class="pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
            style="background: radial-gradient(360px circle at var(--x,50%) var(--y,50%), rgba(16,185,129,.08), transparent 40%);"
          ></div>

          <div class="relative z-10">
            <h3 class="font-semibold tracking-tight text-gray-900">Adresse</h3>
            <p class="mt-2 text-gray-700">{addressFull}</p>
            <p class="text-sm text-gray-600">Basés près de Toulouse — déplacements rapides sur toute l’aire toulousaine.</p>

            <div class="mt-4 flex flex-wrap gap-2">
              <a
                href={mapsHref}
                target="_blank"
                rel="noopener"
                class="inline-flex items-center gap-2 rounded-xl bg-emerald-600 px-4 py-2 text-sm font-medium text-white
                       shadow-sm transition hover:-translate-y-0.5 hover:shadow-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500"
              >
                Ouvrir dans Maps
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  class="h-4 w-4"
                  aria-hidden="true"
                  focusable="false"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M7 17L17 7M17 7H9M17 7v8" />
                </svg>
              </a>
              <button
                id="copy-addr"
                data-text={addressFull}
                class="inline-flex items-center gap-2 rounded-xl bg-gray-900 px-4 py-2 text-sm font-medium text-white
                       shadow-sm transition hover:-translate-y-0.5 hover:shadow-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500 cursor-pointer"
              >
                Copier l’adresse
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  class="h-4 w-4"
                  aria-hidden="true"
                  focusable="false"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <rect x="9" y="9" width="10" height="10" rx="2" />
                  <rect x="5" y="5" width="10" height="10" rx="2" opacity=".6" />
                </svg>
              </button>
            </div>
          </div>
        </article>
      </div>
    </div>
  </div>
</section>

<style is:global>
/* reveal au scroll + délai (via --delay) */
.reveal { opacity: 0; transform: translateY(8px); transition: opacity .45s ease, transform .45s ease; transition-delay: var(--delay, 0ms); }
.reveal.is-inview { opacity: 1; transform: translateY(0); }

@media (prefers-reduced-motion: reduce) {
  .reveal { opacity: 1; transform: none; transition: none; }
  .city-chip, .zone-card { transition: none !important; }
}
</style>

<script>
  // Reveal au scroll
  const io = new IntersectionObserver((entries) => {
    entries.forEach(e => {
      if (e.isIntersecting) {
        e.target.classList.add('is-inview');
        io.unobserve(e.target);
      }
    });
  }, { threshold: 0.18 });

  document.querySelectorAll('.reveal').forEach(el => io.observe(el));

  // Spotlight qui suit la souris (cartes de droite)
  document.querySelectorAll('.zone-card').forEach((card) => {
    card.addEventListener('mousemove', (e) => {
      const r = card.getBoundingClientRect();
      const x = ((e.clientX - r.left) / r.width) * 100;
      const y = ((e.clientY - r.top) / r.height) * 100;
      card.style.setProperty('--x', x + '%');
      card.style.setProperty('--y', y + '%');
    });
    card.addEventListener('mouseleave', () => {
      card.style.removeProperty('--x');
      card.style.removeProperty('--y');
    });
  });

  // Étendre / replier la liste des villes en JS (détecte automatiquement l'overflow)
  const wrap = document.getElementById('cities-wrap');
  const list = document.getElementById('cities-list');
  const fade = document.getElementById('cities-fade');
  const btn = document.getElementById('toggle-cities');

  const updateToggleVisibility = () => {
    if (!wrap || !list || !btn) return;
    // si pas d'overflow, on cache le bouton et le fondu
    const hasOverflow = list.scrollHeight > wrap.clientHeight + 2;
    btn.style.display = hasOverflow ? '' : 'none';
    fade.style.display = hasOverflow && btn.dataset.state !== 'expanded' ? '' : 'none';
  };

  // initial
  updateToggleVisibility();
  // sur resize (responsive)
  window.addEventListener('resize', () => { updateToggleVisibility(); });

  if (btn) {
    btn.addEventListener('click', () => {
      const expanded = btn.dataset.state === 'expanded';
      if (expanded) {
        // replier
        wrap.classList.remove('max-h-full');
        wrap.classList.add('max-h-64', 'md:max-h-80');
        btn.dataset.state = 'collapsed';
        btn.innerText = 'Afficher tout';
        fade.style.display = '';
      } else {
        // étendre
        wrap.classList.remove('max-h-64', 'md:max-h-80');
        wrap.classList.add('max-h-full');
        btn.dataset.state = 'expanded';
        btn.innerText = 'Réduire';
        fade.style.display = 'none';
      }
    });
  }

  // Copier l'adresse
  const copyBtn = document.getElementById('copy-addr');
  if (copyBtn && 'clipboard' in navigator) {
    copyBtn.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(copyBtn.getAttribute('data-text') || '');
        copyBtn.classList.add('ring-2','ring-emerald-500');
        setTimeout(() => copyBtn.classList.remove('ring-2','ring-emerald-500'), 600);
      } catch {}
    });
  }
</script>
